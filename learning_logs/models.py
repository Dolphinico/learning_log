from django.db import models

# Create your models here.

class Topic(models.Model):
    """Тема, которую изучает пользователь"""
    # атрибут text содержит данные CharField — блок данных, состоящий из символов
    # атрибуты CharField могут использоваться для хранения небольших объемов текста:  имен, заголовков, названий городов и т.д.
    # при определении атрибута CharField необходимо сообщить Django, 
    # сколько места нужно зарезервировать для него в базе данных. 
    # в данном случае задается максимальная длина max_length, равная 200 символам:
    text = models.CharField(max_length=200)

    # Атрибут date_added содержит данные DateTimeField — блок данных для хранения даты и времени. 
    # Аргумент auto_add_now=True приказывает  Django автоматически присвоить этому атрибуту текущую дату и время
    # каждый раз, когда пользователь создает новую тему:
    date_added = models.DateTimeField(auto_now_add=True)
    # Необходимо сообщить Django, какой атрибут должен использоваться по умолчанию при вводе информации о теме.
    # Django вызывает метод __str__() для вывода простого представления модели.
    # Мы написали реализацию __str__(), которая возвращает строку, хранящуюся в атрибуте text:
    def __str__(self):
        """Возвращает строковое представление модели."""
        return self.text

    # класс Entry наследует от базового класса Model, как и рассмотренный ранее класс Topic
class Entry(models.Model):
    """Информация,изученная пользователем по теме"""
    # Первый атрибут, topic, является экземпляром ForeignKey.
    # Термин «внешний ключ» (foreign key) происходит из теории баз данных;
    # внешний ключ содержит ссылку на другую запись в базе данных.
    # Таким образом каждая запись связывается с конкретной темой.
    # Каждой теме при создании присваивается ключ, или идентификатор.
    # Если потребуется установить связь между двумя записями данных,
    # Django использует ключ, связанный с каждым блоком информации:
    # Затем идет атрибут с именем text, который является экземпляром TextField.
    # Полю такого типа ограничение размера не требуется, потому что размер отдельных
    # записей не ограничивается. Атрибут date_added позволяет отображать записи в по-
    # рядке их создания и снабдить каждую запись временной меткой:
    topic = models.ForeignKey(Topic, on_delete=models.DO_NOTHING)
    text = models.TextField()
    date_added = models.DateTimeField(auto_now_add=True)
    # класс Meta вкладывается в класс Entry.
    # Класс Meta хранит дополнительную информацию по управлению моделью;
    # в данном случае он позволяет задать специальный атрибут,
    # который приказывает Django использовать форму множественного числа Entries 
    # при обращении более чем к одной записи. (Без этого Django будет использовать неправильную форму Entrys.)
    class Meta:
        verbose_name_plural = 'entries'
    
    # метод __str__() сообщает Django, какая информация должна отображаться
    # при обращении к отдельным записям.
    # Так как запись может быть достаточно длинным блоком текста,
    # мы приказываем Django выводить только первые 50 символов

    def __str__(self):
        """Возвращает строковое представление модели."""
        if self.text[50:]:
            return self.text[:50] + "..."
        else:
            return self.text[:50] 
            